/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AIChatInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getMessage"
      | "getProcessingMessages"
      | "getUserHistory"
      | "history"
      | "processPrompt"
      | "processingMessages"
      | "roflAppID"
      | "submitAgentReply"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AgentReplied" | "MessageSent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getMessage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessingMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHistory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "history",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processPrompt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "processingMessages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roflAppID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitAgentReply",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProcessingMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "history", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processPrompt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processingMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roflAppID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitAgentReply",
    data: BytesLike
  ): Result;
}

export namespace AgentRepliedEvent {
  export type InputTuple = [messageId: BigNumberish, reply: string];
  export type OutputTuple = [messageId: bigint, reply: string];
  export interface OutputObject {
    messageId: bigint;
    reply: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [user: AddressLike, messageId: BigNumberish];
  export type OutputTuple = [user: string, messageId: bigint];
  export interface OutputObject {
    user: string;
    messageId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AIChat extends BaseContract {
  connect(runner?: ContractRunner | null): AIChat;
  waitForDeployment(): Promise<this>;

  interface: AIChatInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMessage: TypedContractMethod<
    [messageId: BigNumberish],
    [[string, string, string]],
    "view"
  >;

  getProcessingMessages: TypedContractMethod<[], [bigint[]], "view">;

  getUserHistory: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  history: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  processPrompt: TypedContractMethod<
    [prompt: string, plugin: string],
    [bigint],
    "nonpayable"
  >;

  processingMessages: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  roflAppID: TypedContractMethod<[], [string], "view">;

  submitAgentReply: TypedContractMethod<
    [messageId: BigNumberish, reply: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMessage"
  ): TypedContractMethod<
    [messageId: BigNumberish],
    [[string, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProcessingMessages"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserHistory"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "history"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "processPrompt"
  ): TypedContractMethod<
    [prompt: string, plugin: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processingMessages"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "roflAppID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "submitAgentReply"
  ): TypedContractMethod<
    [messageId: BigNumberish, reply: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AgentReplied"
  ): TypedContractEvent<
    AgentRepliedEvent.InputTuple,
    AgentRepliedEvent.OutputTuple,
    AgentRepliedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;

  filters: {
    "AgentReplied(uint256,string)": TypedContractEvent<
      AgentRepliedEvent.InputTuple,
      AgentRepliedEvent.OutputTuple,
      AgentRepliedEvent.OutputObject
    >;
    AgentReplied: TypedContractEvent<
      AgentRepliedEvent.InputTuple,
      AgentRepliedEvent.OutputTuple,
      AgentRepliedEvent.OutputObject
    >;

    "MessageSent(address,uint256)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
  };
}
